#---------------------------------#
#      environment configuration  #
#---------------------------------#
version: 4.0.{build}.0
install:
    - git clone https://github.com/PowerShell/DscResource.Tests
    - appveyor DownloadFile https://dist.nuget.org/win-x86-commandline/v3.4.4/NuGet.exe
    - ps: |
        Import-Module -Name .\DscResource.Tests\TestHelper.psm1 -Force
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
        Install-Module -Name Pester -Repository PSGallery -Force

#---------------------------------#
#      build configuration        #
#---------------------------------#

build: false

#---------------------------------#
#      test configuration         #
#---------------------------------#

test_script:
    - ps: |
        Write-Host 'Removing all SQL related PowerShell modules so they can not be used by the common tests.'
        Write-Host 'This is a workaround because the AppVeyor build worker image contains SQL Server. More information in issue #239.'
        Write-Host 'Modules that are being removed:'
        Get-Module -ListAvailable -Name 'sql*' | ForEach-Object -Process { Write-Host $_.Path; Remove-Item $_.Path -Force; }

        # Start the tests
        Write-Warning -Message 'Code coverage statistics are being calculated. This will slow the start of the tests while the code matrix is built. Please be patient.'
        $testResultsFile = '.\TestsResults.xml'
        $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru -CodeCoverage @("$env:APPVEYOR_BUILD_FOLDER\*.psm1","$env:APPVEYOR_BUILD_FOLDER\DSCResources\**\*.psm1")
        (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
        if ($res.FailedCount -gt 0) {
            throw "$($res.FailedCount) tests failed."
        }

#---------------------------------#
#      deployment configuration   #
#---------------------------------#

# scripts to run before deployment
deploy_script:
  - ps: |
      # Creating project artifact
      $stagingDirectory = (Resolve-Path ..).Path
      $manifest = Join-Path $pwd "xSQLServer.psd1"
      (Get-Content $manifest -Raw).Replace("4.0.0.0", $env:APPVEYOR_BUILD_VERSION) | Out-File $manifest
      $zipFilePath = Join-Path $stagingDirectory "$(Split-Path $pwd -Leaf).zip"
      Add-Type -assemblyname System.IO.Compression.FileSystem
      [System.IO.Compression.ZipFile]::CreateFromDirectory($pwd, $zipFilePath)

      # Creating NuGet package artifact
      New-Nuspec -packageName $env:APPVEYOR_PROJECT_NAME -version $env:APPVEYOR_BUILD_VERSION -author "Microsoft" -owners "Microsoft" -licenseUrl "https://github.com/PowerShell/DscResources/blob/master/LICENSE" -projectUrl "https://github.com/$($env:APPVEYOR_REPO_NAME)" -packageDescription $env:APPVEYOR_PROJECT_NAME -tags "DesiredStateConfiguration DSC DSCResourceKit" -destinationPath .

      # Force to use the downloaded Nuget v3.4.4, because newer versions of Nuget are failing the deploy step.
      # See issue https://github.com/PowerShell/xNetworking/issues/177
      Start-Process -FilePath "$($env:APPVEYOR_BUILD_FOLDER)\nuget" -Wait -ArgumentList @(
        "pack",
        ".\$($env:APPVEYOR_PROJECT_NAME).nuspec",
        "-outputdirectory $env:APPVEYOR_BUILD_FOLDER"
      )

      $nuGetPackageName = $env:APPVEYOR_PROJECT_NAME + "." + $env:APPVEYOR_BUILD_VERSION + ".nupkg"
      $nuGetPackagePath = (Get-ChildItem $nuGetPackageName).FullName

      @(
          # You can add other artifacts here
          $zipFilePath,
          $nuGetPackagePath
      ) | % {
          Write-Host "Pushing package $_ as Appveyor artifact"
          Push-AppveyorArtifact $_
        }





