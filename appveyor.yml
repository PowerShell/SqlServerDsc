#---------------------------------#
#      environment configuration  #
#---------------------------------#
version: 9.0.{build}.0
image: Visual Studio 2017
install:
    - git clone https://github.com/PowerShell/DscResource.Tests
    - ps: Write-Verbose -Message "PowerShell version $($PSVersionTable.PSVersion)" -Verbose
    - ps: Import-Module "$env:APPVEYOR_BUILD_FOLDER\DscResource.Tests\AppVeyor.psm1"
    - ps: Invoke-AppveyorInstallTask
    - ps: |
        $sqlPublicCertificatePath = Join-Path -Path $env:temp -ChildPath 'SqlPublicKey.cer'
        $sqlPrivateCertificatePath = Join-Path -Path $env:temp -ChildPath 'SqlPrivateKey.cer'
        Install-Module -Name PSPKI -Scope CurrentUser -Force
        Import-Module -Name PSPKI

        $newSelfSignedCertificateExParameters = @{
            Subject            = "CN=$certificateSubject"
            EKU                = 'Server Authentication'
            KeyUsage           = 'KeyEncipherment, DataEncipherment'
            SAN                = "dns:$certificateSubject"
            FriendlyName       = 'Sql Encryption certificate'
            StoreLocation      = 'LocalMachine'
            KeyLength          = 2048
            ProviderName       = 'Microsoft Enhanced Cryptographic Provider v1.0'
            AlgorithmName      = 'RSA'
            SignatureAlgorithm = 'SHA256'
        }

        $certificate = New-SelfSignedCertificateEx @newSelfSignedCertificateExParameters -Exportable

        Write-Info -Message ('Created self-signed certificate ''{0}'' with thumbprint ''{1}''.' -f $certificate.Subject, $certificate.Thumbprint)
        Export-Certificate -Cert $certificate -FilePath $sqlPublicCertificatePath -Force

        # Export the private key certificate
        $sqlPriavteKeyPassword = ConvertTo-SecureString -String "1234" -Force -AsPlainText
        Export-PfxCertificate -FilePath $sqlPrivateCertificatePath -Password $sqlPriavteKeyPassword -Cert $certificate

        # Update a machine and session environment variable with the path to the public certificate.
        Set-EnvironmentVariable -Name 'SqlPublicCertificatePath' -Value $sqlPublicCertificatePath -Machine
        Write-Info -Message ('Environment variable $env:SqlPublicCertificatePath set to ''{0}''' -f $env:SqlPublicCertificatePath)

        # Update a machine and session environment variable with the path to the private certificate.
        Set-EnvironmentVariable -Name 'SqlPrivateCertificatePath' -Value $sqlPrivateCertificatePath -Machine
        Write-Info -Message ('Environment variable $env:SqlPrivateCertificatePath set to ''{0}''' -f $env:SqlPrivateCertificatePath)

        # Update a machine and session environment variable with the thumbprint of the certificate.
        Set-EnvironmentVariable -Name 'SqlCertificateThumbprint' -Value $certificate.Thumbprint -Machine
        Write-Info -Message ('Environment variable $env:SqlCertificateThumbprint set to ''{0}''' -f $env:SqlCertificateThumbprint)

#---------------------------------#
#      build configuration        #
#---------------------------------#

build: false

#---------------------------------#
#      test configuration         #
#---------------------------------#

test_script:
    - ps: |
        # Workaround for issue #239 and issue #774.
        Write-Verbose -Message '--- WORKAROUND FOR ISSUE #239 AND ISSUE #774 ---' -Verbose
        $sqlModules = Get-Module -ListAvailable -Name 'sql*'
        $sqlUniqueModulePath = Split-Path -Path (Split-Path $sqlModules.Path -Parent) -Parent | Sort-Object -Unique
        $sqlUniqueModulePath | ForEach-Object -Process {
            $newFolderName = '{0}.old' -f (Split-Path -Path $_ -Leaf)
            Write-Verbose ('Renaming ''{0}'' to ''..\{1}''' -f $_, $newFolderName) -Verbose
            Rename-Item $_ -NewName $newFolderName -Force
        }

        Write-Verbose -Message '' -Verbose

        # Workaround for issue #798
        Write-Verbose -Message '--- WORKAROUND FOR ISSUE #798 ---' -Verbose
        $azureModules = Get-Module -ListAvailable -Name 'Azure*'
        $azureUniqueModulePath = Split-Path -Path (Split-Path $azureModules.Path -Parent) -Parent | Sort-Object -Unique
        $azureUniqueModulePath | ForEach-Object -Process {
            $newFolderName = '{0}.old' -f (Split-Path -Path $_ -Leaf)
            Write-Verbose ('Renaming ''{0}'' to ''..\{1}''' -f $_, $newFolderName) -Verbose
            Rename-Item $_ -NewName $newFolderName -Force
        }
        Write-Verbose -Message '' -Verbose

        Invoke-AppveyorTestScriptTask -CodeCoverage -CodeCovIo -ExcludeTag @() -RunTestInOrder

#---------------------------------#
#      deployment configuration   #
#---------------------------------#

# scripts to run before deployment
deploy_script:
    - ps: |
        Invoke-AppveyorAfterTestTask
