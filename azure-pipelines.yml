trigger:
  branches:
    include:
    - master
  tags:
    include:
    - "v*"
    exclude:
    - "*-*"

stages:
  - stage: Build
    jobs:
      - job: BuildModuleJob
        pool:
          vmImage: 'ubuntu 16.04'
        steps:
          - task: GitVersion@5
            name: gitversion
            inputs:
              runtime: 'core'
              configFilePath: 'GitVersion.yml'

          - task: PowerShell@2
            name: Build
            inputs:
              filePath: './build.ps1'
              arguments: '-ResolveDependency -tasks pack'
              pwsh: true
            env:
              ModuleVersion: $(GitVersion.Informationalversion)

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'output/'
              ArtifactName: 'output'
              publishLocation: 'Container'

  - stage: Test
    dependsOn: Build
    jobs:
      - job: Test_HQRM
        pool:
          vmImage: 'win1803'
        timeoutInMinutes: 0
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'
          - task: PowerShell@2
            name: Test
            inputs:
              filePath: './build.ps1'
              arguments: '-Tasks hqrmtest'
              pwsh: false
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'
              testRunTitle: 'HQRM'

      - job: Test_Unit
        pool:
          vmImage: 'win1803'
        timeoutInMinutes: 0
        steps:
          - powershell: |
              $repositoryOwner,$repositoryName = $env:BUILD_REPOSITORY_NAME -split '/'
              echo "##vso[task.setvariable variable=RepositoryOwner;isOutput=true]$repositoryOwner"
              echo "##vso[task.setvariable variable=RepositoryName;isOutput=true]$repositoryName"
            name: DscBuildVariable
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'
          - task: PowerShell@2
            name: Test
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterScript 'tests/Unit'"
              pwsh: false
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'
              testRunTitle: 'Unit (Windows Server Core)'
          - task: PublishCodeCoverageResults@1
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: 'output/testResults/CodeCov*.xml'
              pathToSources: '$(Build.SourcesDirectory)/output/$(DscBuildVariable.RepositoryName)'

      - job: Test_Integration_SQL2016
        pool:
          vmImage: 'windows-2019'
        timeoutInMinutes: 0
        variables:
          # This sets environment variable $env:CI.
          CI: true
          # This sets environment variable $env:CONFIGURATION.
          configuration: Integration_SQL2016
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'
          - task: PowerShell@2
            name: ConfigureWinRM
            inputs:
              targetType: 'inline'
              script: 'winrm quickconfig -quiet'
              pwsh: false
          - powershell: |
              ./build.ps1 -Tasks test -CodeCoverageThreshold 0 -PesterScript @(
                  # Run the integration tests in a specific group order.
                  # Group 1
                  'tests/Integration/MSFT_SqlSetup.Integration.Tests.ps1'
                  # Group 2
                  'tests/Integration/MSFT_SqlAgentAlert.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlServerNetwork.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlServerLogin.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlServerEndPoint.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlServerDatabaseMail.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlRSSetup.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlDatabaseDefaultLocation.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlDatabase.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlAlwaysOnService.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlAgentOperator.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlServiceAccount.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlAgentFailsafe.Integration.Tests.ps1'
                  # Group 3
                  'tests/Integration/MSFT_SqlServerRole.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlRS.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlDatabaseUser.Integration.Tests.ps1'
                  # Group 4
                  'tests/Integration/MSFT_SqlScript.Integration.Tests.ps1'
                  # Group 5
                  'tests/Integration/MSFT_SqlServerSecureConnection.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlScriptQuery.Integration.Tests.ps1'
              )
            name: Test
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'
              testRunTitle: 'Integration (SQL Server 2016 / Windows Server 2019)'

      - job: Test_Integration_SQL2017
        pool:
          vmImage: 'windows-2019'
        timeoutInMinutes: 0
        variables:
          # This sets environment variable $env:CI.
          CI: true
          # This sets environment variable $env:CONFIGURATION.
          configuration: Integration_SQL2017
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'
          - task: PowerShell@2
            name: ConfigureWinRM
            inputs:
              targetType: 'inline'
              script: 'winrm quickconfig -quiet'
              pwsh: false
          - powershell: |
              ./build.ps1 -Tasks test -CodeCoverageThreshold 0 -PesterScript @(
                  # Run the integration tests in a specific group order.
                  # Group 1
                  'tests/Integration/MSFT_SqlSetup.Integration.Tests.ps1'
                  # Group 2
                  'tests/Integration/MSFT_SqlAgentAlert.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlServerNetwork.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlServerLogin.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlServerEndPoint.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlServerDatabaseMail.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlRSSetup.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlDatabaseDefaultLocation.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlDatabase.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlAlwaysOnService.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlAgentOperator.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlServiceAccount.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlAgentFailsafe.Integration.Tests.ps1'
                  # Group 3
                  'tests/Integration/MSFT_SqlServerRole.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlRS.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlDatabaseUser.Integration.Tests.ps1'
                  # Group 4
                  'tests/Integration/MSFT_SqlScript.Integration.Tests.ps1'
                  # Group 5
                  'tests/Integration/MSFT_SqlServerSecureConnection.Integration.Tests.ps1'
                  'tests/Integration/MSFT_SqlScriptQuery.Integration.Tests.ps1'
              )
            name: Test
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'
              testRunTitle: 'Integration (SQL Server 2017 / Windows Server 2019)'

  - stage: Deploy
    dependsOn: Test
    # Only execute deploy stage if we're on master and previous stage succeeded
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        )
      )
    jobs:
      - job: Deploy_Artefact
        pool:
          vmImage: 'ubuntu 16.04'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'
          - task: PowerShell@2
            name: publish_prerelease
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks publish'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              GalleryApiToken: $(GalleryApiToken)
          - task: PowerShell@2
            name: send_changelog_PR
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks Create_ChangeLog_GitHub_PR'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
